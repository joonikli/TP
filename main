from cmu_graphics import *
import random, copy
from PIL import Image
import time

# basic background/framework of app + buttons

class Frame:
    # draws basic setup of drawing app
    def __init__(self, app):
        self.x = 0
        self.y = 0
        self.w = app.width
        self.h = app.height
        self.toolsW = self.w/5
        self.toolsH = app.height
        self.canvasW = self.w/5 
        self.canvasH = self.toolsH 
        self.color = rgb(112, 112, 112) # hehe
        self.border = 'black'
    
    def drawBg(self, app):
        # background of app
        drawRect(0, 0, app.width, app.height, 
                 fill=self.color) #background
    
    def drawToolBar(self, app):
        # tool bar and tools
        drawRect(0, 0, app.width/5+10, app.height, 
                 fill=self.color)
        drawRect(0, 0, app.width, 10, fill=self.color)
        drawRect(0, app.height-10, app.width, 10, fill=self.color)
        drawLine(app.width/5, 0, app.width/5, app.height, fill='black')
        drawRect(app.width-app.width/5-10, 0, self.w, app.height,
                 fill=self.color)
        drawLine(app.width-app.width/5, 0, app.width-app.width/5, 
                 app.height, fill='black')

class Button:
    def __init__(self, x, y, width, color, border, height=None,
                 func=None, text=None):
        self.x = x
        self.y = y
        self.size = width
        self.color = color
        self.border = border
        self.ysize = height or self.size
        self.text = text
        self.func = func

    def drawButton(self):
        drawRect(self.x, self.y, self.size, self.ysize, 
                fill=self.color, border=self.border)
        self.drawText()

    def drawText(self):
        drawLabel(self.text, self.x+self.size/2, self.y+self.ysize/2, 
                  size=15, align='center')

    def drawIcon(self, image):
        drawImage(image, self.x, self.y, align='left-top')
    
    def drawLayerControl(self):
        drawRect(self.x, self.y, self.size, self.ysize, 
                 fill=self.color, border=self.border)

    def drawLayerButton(self, layerCt, layerOpacity):
        y = app.width - self.y*5
        drawRect(self.x-20, y, 100, self.ysize*10, 
                 fill=self.color, border=self.border)
        print('drawn') # not getting called at all huh
        drawLabel(f'Layer {layerCt}', self.x+5, y, align='right-top')
        drawLabel(f'Opacity {layerOpacity}%', 
                  self.x+5, self.y+50, align='right-top')

    def isPressed(self, mX, mY):
        bRight = self.x + self.size
        bBottom = self.y + self.ysize
        if (self.x <= mX <= bRight and 
            self.y <= mY <= bBottom):
            return True
        return False
    
    def respondToPress(self, app, mX, mY):
        if self.isPressed(mX, mY): 
            return True
        return False
    
    def getFunc(self, app):
        print(self.func)
        return self.func

    def __eq__(self, other):
        if isinstance(other, Button):
            return (self.x == other.x and 
            self.y == other.y 
            and self.size == other.size)
    
    def __hash__(self):
        return hash((self.x, self.y, self.size))
    
class Canvas:
    # what you draw on, a white canvas
    def __init__(self, x, y, w, h, dx=0, dy=0, dsize=1, opacity=100):
        self.canvasLeft = x
        self.canvasTop = y
        self.canvasWidth = w
        self.canvasHeight = h
        self.opacity = opacity
        # self.opacity = 0  #test

    def drawCanvas(self, app, x, y, w, h, dx=0, dy=0, dsize=1):  
        self.canvasLeft = x + app.dx + 10
        self.canvasTop = y + app.dy + 10
        self.canvasWidth = w*app.dsize - 20
        self.canvasHeight = h*app.dsize - 10
        drawRect(self.canvasLeft, self.canvasTop, 
                 self.canvasWidth, self.canvasHeight, fill='white', 
                 opacity=self.opacity)
        
class Layer(Canvas):
    count = 0
    # puts all drawings into an instance of a layer, can stack layers 
    def __init__(self, app, x=0, y=0, w=0, h=0, dx=0, dy=0, dsize=1):
        super().__init__(x, y, w, h, dx, dy, dsize)
        Layer.count += 1
        self.count = Layer.count
        self.rectsList = []
        self.ovalsList = []
        self.straightLinesList = []
        self.opacity = 100
        self.pencilLinesList = [] # [[[color][points]]] format 
        self.pastelLinesList = []
        self.eraserLinesList = []
        self.allItems = [
             [app.rect, self.rectsList, self.drawRects], 
             [app.oval, self.ovalsList, self.drawOvals],
             [app.straight, self.straightLinesList, 
                                self.drawStraightLines], 
             [app.pencil, self.pencilLinesList, self.drawPencilLines],
             [app.pastel, self.pastelLinesList, self.drawPastelLines],
             [app.eraser, self.eraserLinesList, self.erase]]
        self.redo = []
        self.lastMove = None

    def addOpacity(self):
        print('adding opactiy', self.opacity)
        self.opacity += 10
    
    def deleteOpacity(self):
        print('deleting opacity', self.opacity)
        self.opacity -= 50

    def getInfo(self, other): # gets the list the info needs to get added to
        for toggle, lst, func in self.allItems:
            if toggle[0] == other[0]:
                return lst
            
    def func(self, other):
        for toggle, lst, func in self.allItems:
            if toggle == other:
                return func

    def getLayerCtOp(self): # for labelling info about that layer
        return (Layer.count, self.opacity)

    def drawRects(self, ptList):
        print('entering draw rectangle', ptList)
        if len(ptList[1]) < 2:
            return
        color = ptList[0][0]
        print('point list', ptList[1])
        (tl, tr), (bl, br) = ptList[1]
        w, h = abs(bl - tl), abs(br - tr)
        drawRect(tl, tr, w, h, fill=color, opacity=self.opacity)
        # print('try find rect location', tl, tr, w, h, color)
    
    def drawOvals(self, ptList):
        if len(ptList[1]) < 2:
            return
        color = ptList[0][0]
        # print('pts of Ovals', ptList)
        (x1, y1), (x2, y2) = ptList[1]
        w, h = abs(x2-x1), abs(y2-y1)
        drawOval(x1, y1, w, h, fill=color, 
                 opacity=self.opacity, align='left-top')
    
    def drawPastelLines(self, pointList, opacity=100):
        o = self.opacity
        print('o opacity???', o)
        if len(pointList) < 1:
            return
        color = pointList[0][0]
        pts = pointList[1]
        # print('points coordinates', pts)
        for i in range(1, len(pts)-1):
            drawLine(pts[i-1][0], pts[i-1][1], 
                    pts[i][0], pts[i][1], lineWidth=6, 
                    fill=color, opacity=o-40)
            drawLine(pts[i-1][0], pts[i-1][1], 
                    pts[i][0], pts[i][1], lineWidth=12, 
                    fill=color, opacity=o-50)
            drawLine(pts[i-1][0], pts[i-1][1], 
                    pts[i][0], pts[i][1], lineWidth=18, 
                    fill=color, opacity=o-70)
            
    def drawPencilLines(self, pointList, opacity=100):
        o = self.opacity
        if len(pointList) < 1:
            return
        print('complete point list', pointList)
        color = pointList[0][0]
        pts = pointList[1]
        print('point tring to draw', pts)
        for i in range(1, len(pts)):
            drawLine(pts[i-1][0], pts[i-1][1], 
                    pts[i][0], pts[i][1], fill=color, opacity=o)   

    def drawStraightLines(self, pointList, opacity=100):
        o = self.opacity
        if 0 < len(pointList) < 2:
            return
        print('point list for straight lines', pointList)
        color = pointList[0][0]
        pts = pointList[1]
        drawLine(pts[0][0], pts[0][1], pts[1][0], pts[1][1],
                fill=color, opacity=o) 

    def colorChanger(self, app):
        r = random.randrange(0, 256)
        g = random.randrange(0, 256)
        b = random.randrange(0, 256)
        app.currColor = rgb(r, g, b) 

    def erase(self, pointList):
        o = 100
        if len(pointList) < 2:
            return
        color = 'white' # ignore current color
        pts = pointList[1]
        for i in range(1, len(pts)):
            drawOval(pts[i-1][0], pts[i-1][1], 20, 20, 
                     fill=color, align='left-top')
            drawLine(pts[i-1][0], pts[i-1][1], 
                    pts[i][0], pts[i][1], lineWidth= 20, fill=color, opacity=o) 

    def undo(self, app): # only works on current layer, list of type
        lst = self.getInfo(app.lastMove)
        undid = lst.pop()
        self.redo.append(undid)

    def redo(self, app):
        redid = self.redo.pop()
        lst = self.getInfo(app.lastMove)
        lst.append(redid) # assuming it's smthing like app.penciLinesList

    def drawOld(self):
        for toggle, itemList, func in self.allItems: 
            for item in itemList:
                func(item)

class globalLayer:
    def __init__(self):
        self.allLayers = []
    
    def addLayer(self, other):
        self.allLayers.append(other)

    def deleteLayer(self):
        self.allLayers.pop()
                
def onAppStart(app):
    app.stepsPerSecond = 10
    app.slate = Frame(app) # initial background screen 
    startTools(app)
    app.startLayer = Layer(app)
    app.layers = globalLayer() # store all layers
    app.layers.addLayer(app.startLayer) 
    startLayerTools(app)
    app.currColor = 'red'
    app.new = [[app.currColor], []] # nested 2D, add this to the layer's lists after
    # print('on app start app.new', app.new)

def startTools(app):
    app.canDraw = False
    app.finishDraw = False
    app.oval = [False]
    app.rect = [False]
    # print('app.rect', app.rect)
    app.pastel = [False]
    app.pencil = [False]
    app.straight = [False]
    app.eraser = [False]
    app.undo = [False]
    app.redo = [False]
    # for panning: dx, dy
    app.dx = 0
    app.dy = 0
    # for zooming: zoomIn, zoomOut, dsize
    app.zoomIn = [False]
    app.zoomOut = [False]
    app.currentMove = None
    app.lastMove = None
    app.dsize = 1
    app.tools = [[app.pastel, app.pencil],
                 [app.oval, app.rect],
                 [app.straight, app.eraser], 
                 [app.undo, app.redo]] # get rid of zoom
                # write a note that says that panning uses arrow keys 
                # also need a color selector
                # new layer
    startLeftTools(app)

def startLeftTools(app): # regular drawing tools
    app.buttons = [] # buttons to press to switch tools above
    start = app.width/30
    rows = len(app.tools)
    cols = len(app.tools[0])
    for row in range(rows): 
        for col in range(cols):
            button = Button(60*col+start, 60*row+20, 50, 
                            app.slate.color, app.slate.border)
            app.buttons.append([button, row, col])
    startIcons(app)

def startLayerTools(app): # layer tools
    app.layerCtOp = [] # specific info abt that layer, count and opacity
    app.layerControls = []
    start = app.width * 4 / 5
    width = app.width / 12
    height = 0.5 * width
    actions = [app.layers.addLayer, app.layers.deleteLayer,
               app.startLayer.addOpacity, app.startLayer.deleteOpacity]
    controls = ['+ layer', '- layer', '+ opacity', '- opacity']
    for i in range(len(controls)):
        m = 0
        if i % 2 == 0:
            m = 1
        x = width * m * (i % 2 + 1.1) + start + 10
        y = 20 + (i // 2 * width)
        control = Button(x, y, width,
                        app.slate.color, app.slate.border, height,
                        actions[i], controls[i])
        app.layerControls.append(control) 
    ct, opacity = 1, 100
    app.layerCtOp.append([ct, opacity])

def loadPilImage(path):
    return Image.open(path)

def startIcons(app):
    app.paths = ['images/pastel.jpg','images/pencil.jpg',
                'images/oval.jpg', 'images/rectangle.jpg',
                'images/line.jpg', 'images/eraser.jpg', 
                'images/undo.jpg', 'images/redo.jpg'] # 10 icon images
    app.pilImages = []
    for path in app.paths:
        imagei = loadPilImage(path)
        imageWidth, imageHeight = imagei.size
        pilImage2 = imagei.resize((imageWidth//6, imageHeight//6))
        a = CMUImage(pilImage2)
        app.pilImages.append(a)

def onMousePress(app, mX, mY):
    # after clicking on a btton 
    # initialize that shape/line or layer
    # if button is draw pencil line, call Layer.pencilLines
    # wahtever color is selected
    print('complete list', app.new)
    if mX <= app.width/5:
        for [button, row, col] in app.buttons:
            currButton = button
            if currButton.respondToPress(app, mX, mY): # call tools to activate 
                tool = app.tools[row][col]
                print('turned on tool', row, col)
                app.canDraw = True
                tool[0] = True
                print(app.tools)
                app.currentMove = tool
            else:
                app.tools[row][col][0] = False
    elif mX >= app.width - app.width/5:
        for i in range(len(app.layerControls)):
            button = app.layerControls[i]
            currButton = button
            if currButton.respondToPress(app, mX, mY):
                print('function check', currButton.getFunc(app))
                currButton.getFunc(app)
                # is it getting called?
    else:
        print('mouse press in middle', app.new)
        rows = len(app.tools)
        cols = len(app.tools[0])
        for row in range(rows):
            for col in range(cols):
                tool = app.tools[row][col]
                if tool[0] == True:
                    print('which tool coordinates', row, col)
                    print('testing app.new', app.new)
                    if tool in [app.pencil, app.pastel, app.eraser]:
                        app.new[1].append((mX, mY))
                        print('start append?', app.new[1])
                    elif tool in [app.oval, app.rect, app.straight]:
                        app.new[1].append((mX, mY))
                    elif tool in [app.redo, app.undo]:
                        app.startLayer.redo(app)
                        app.startLayer.undo(app)

def onMouseDrag(app, mX, mY):
    rows = len(app.tools)
    cols = len(app.tools[0])
    for row in range(rows):
        for col in range(cols):
            tool = app.tools[row][col]
            if tool[0] == True:
                if tool in [app.pencil, app.pastel, app.eraser]:
                    app.new[1].append((mX, mY))
        
def onMouseRelease(app, mX, mY):
    #add it to the list of items
    #  #  designated color is now the last itemin list
    print('on mouse release app. new list', app.new)
    rows = len(app.tools)
    cols = len(app.tools[0])
    for row in range(rows):
        for col in range(cols):
            tool = app.tools[row][col]
            if tool[0] == True and app.canDraw: 
                if tool not in [app.redo, app.undo, app.zoomIn, app.zoomOut]:
                    if tool not in [app.oval, app.rect, app.straight]:
                        lstToAdd = app.startLayer.getInfo(tool)
                        print(lstToAdd)
                        lstToAdd.append(app.new)
                        app.new = [['yellow'], []] # maybe on mouse release color not resetting?
                        app.lastMove = app.currentMove 
                        app.finishDraw = True
                    else:
                        if len(app.new[1]) >= 2:
                            lstToAdd = app.startLayer.getInfo(tool)
                            print(lstToAdd)
                            lstToAdd.append(app.new)
                            app.new = [[app.currColor], []] 
                            app.lastMove = app.currentMove 
                            app.finishDraw = True
                        
def onKeyPress(app, key):
    if key == 'left':
        app.dx += 5
    elif key == 'right':
        app.dx -= 5
    elif key == 'up':
        app.dy += 5
    elif key == 'down':
        app.dy -= 5
    print('pan key')

def redrawAll(app):
    app.slate.drawBg(app) #draws very background of app
    startX = app.slate.canvasW
    endX = app.slate.w - startX*2
    #draw white background for first layer (default look)
    app.layers.allLayers[0].drawCanvas(app, startX, 0, endX, app.slate.h-10)
    drawLayerAllInfo(app)
    app.slate.drawToolBar(app)
    drawLayerButtons(app)
    for i in range(len(app.buttons)): # regular tool buttons
        button = app.buttons[i]
        button[0].drawButton()
        button[0].drawIcon(app.pilImages[i])

def drawLayerButtons(app):
    for i in range(len(app.layerControls)): # layer add/del buttons
        button = app.layerControls[i]
        button.drawButton()
        button.drawText()
                    
    for i in range(len(app.layerCtOp)):
        ct = app.layerCtOp[i][0]
        layer = app.layers.allLayers[i]
        start = app.width * 4.2 / 5
        top = app.width * 3.2 / 5
        w, h = 100, 50
        drawRect(start, top, w, h, 
                 fill=app.slate.color, border='black')
        drawLabel(f'layer {ct}', start+w/2, top+h/3, 
                  size=12, align='center')
        drawLabel(f'opacity {layer.opacity}%', start+w/2, top+h/1.5, 
                  size=12, align='center')

def drawLayerAllInfo(app):
    for layer in app.layers.allLayers:
        layer.drawOld() 

    for toggle, lst, func in app.startLayer.allItems:
        if toggle == app.currentMove and len(app.new[1]) > 1:
            f = app.startLayer.func(app.currentMove)
            f(app.new)

runApp(width=800, height=600)