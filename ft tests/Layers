from cmu_graphics import *
# from draw import Layer
import random

class Frame:
    # draws buttons and basic setup of drawing app
    def __init__(self, app):
        self.x = 0
        self.y = 0
        self.w = app.width
        self.h = app.height
        self.toolsW = self.w/5
        self.toolsH = app.height
        self.canvasW = self.w/5 
        self.canvasH = self.toolsH 
        self.color = rgb(99, 97, 97)
        self.border = 'black'

    def draw(self, app):
        self.drawBg(app)
    
    def drawBg(self, app):
        # background of app
        drawRect(0, 0, app.width, app.height, 
                 fill=self.color) #background
    
    def drawToolBar(self, app):
        # tool bar and tools
        drawRect(0, 0, app.width/5, app.height, 
                 fill=self.color, border='black')
        drawRect(app.width-app.width/5, 0, self.w, app.height,
                 fill=self.color, border='black')

class Button:
    def __init__(self, x, y, size, color, border, func):
        self.x = x
        self.y = y
        self.size = size
        self.color = color
        self.border = border
        self.func = func

    def drawButton(self):
        # 8 buttons: 
        drawRect(self.x, self.y, self.size, self.size, 
                 fill=self.color, border=self.border)
    
    def isPressed(self, mX, mY):
        bRight = self.x + self.size
        bBottom = self.y + self.size
        if (self.x <= mX <= bRight and 
            self.y <= mY <= bBottom):
            return True
        return False
    
    def respondToPress(self, mX, mY, layer):
        if self.isPressed(mX, mY): # ne
            self.func(app) # calls function !

class Canvas:
    def __init__(self, x, y, w, h, dx=0, dy=0, dsize=1, opacity=1):
        self.canvasLeft = x
        self.canvasTop = y
        self.canvasWidth = w
        self.canvasHeight = h
        self.dx = dx
        self.dy = dy
        self.dsize = dsize
        self.opacity = 100
        # self.opacity = 0  #test

#app.startLayer.drawCanvas(app, startX, 0, endX, app.slate.h-10)

    def drawCanvas(self, app, x, y, w, h, dx=0, dy=0, dsize=1):  
        self.canvasLeft = x + self.dx + 10
        self.canvasTop = y + self.dy + 10
        self.canvasWidth = w*self.dsize - 20
        self.canvasHeight = h*self.dsize - 10
        print('check inside func', self.canvasLeft, self.canvasTop, 
              self.canvasWidth, self.canvasHeight)
        drawRect(self.canvasLeft, self.canvasTop, 
                 self.canvasWidth, self.canvasHeight, fill='white', 
                 opacity=self.opacity)

class Layer(Canvas):
    # puts all drawings into an instance of a layer, can stack layers 
    def __init__(self, x=0, y=0, w=0, h=0, dx=0, dy=0, dsize=1):
        super().__init__(x, y, w, h, dx, dy, dsize)
        self.rects = []
        self.ovals = []
        self.polygons = []
        self.straightLines = []
        self.currPencilLine = []
        self.pencilLines = [] # x, y, x1, y1, fill(changes), opacity(changes)
        self.pastelLines = []
        self.undos = []
                
    def rect(self, tl, tr, w, h, fill):
        pass
        self.rects.append()
    
    def oval(self, mx, my, w, h, fill):
        pass
        self.ovals.append()

    def straightline(self):
        pass
        self.straightLines.append()

    def pencilLines(self):
        pass
        #makes one item, then adds it to self.pencilLines when done
    
    def undo(self):
        pass

    def redo(self):
        pass

def drawFreeLine(app, pointList, color): # for free-handed lines
        if app.pastel:
            for i in range(1, len(pointList)):
                drawLine(pointList[i-1][0], pointList[i-1][1], 
                        pointList[i][0], pointList[i][1], lineWidth=6, 
                        fill=color, opacity=60)
                drawLine(pointList[i-1][0]*r, pointList[i-1][1]*r, 
                        pointList[i][0]*r, pointList[i][1]*r, lineWidth=12, 
                        fill=color, opacity=50)
                drawLine(pointList[i-1][0]*r, pointList[i-1][1]*r, 
                        pointList[i][0]*r, pointList[i][1]*r, lineWidth=18, 
                        fill=color, opacity=30)
        elif app.pencil:
            for i in range(1, len(pointList)):
                drawLine(pointList[i-1][0], pointList[i-1][1], 
                        pointList[i][0], pointList[i][1], fill=color)

def drawOld(app, allList, color): 
        # draws everything besides what ur currently drawing
        drawOldLines(app, allList, color)
        # drawOldOther

def drawOldLines(app, allList, color):
    for pointList in allList:
        print('check')
        if app.pencil or app.pastel:
            print('check2')
            drawFreeLine(app, pointList, color)
                
def onAppStart(app):
    app.slate = Frame(app) # initial background screen 
    app.startLayer = Layer() 
    app.layers = [app.startLayer] # store all layers

    app.freeLinesList = [] # stores all free-handed lines
    app.newFreeLine = [] # add this to freeLinesList after

    app.pastel = False # two types of free-handed lines (pastel, pencil)
    app.pencil = False

    app.currColor = None # color holder

    app.buttons = [] # buttons to press to switch tools

    start = app.width/30
    for row in range(5): # create buttons
        for col in range(2):
            button = Button(60*col+start, 60*row+10, 50, 
                            app.slate.color, app.slate.border)
            app.buttons.append(button)

def onMousePress(app, mX, mY):
    # after clicking on a btton 
    # initialize that shape/line or layer
    # if button is draw pencil line, call Layer.pencilLines
    # wahtever color is selected
    for i in range(len(app.buttons)):
        currButton = app.buttons[i]
        currButton.respondToPress(mX, mY, app.startLayer) # call function to activate it
    r = random.randrange(0, 256)
    g = random.randrange(0, 256)
    b = random.randrange(0, 256)
    app.currColor = rgb(r, g, b)
    

def onMouseDrag(app, mX, mY):
    app.newPencilLine.append((mX, mY))
    

def onMouseRelease(app, mX, mY):
    #add it to the list of items
    # if drawing pencil line is True: then 
    app.startLayer.pencilLines.append(app.newPencilLine)
    app.newPencilLine = []
    pass

def redrawAll(app):
    #resizes
    app.slate.drawBg(app)
 
    startX = app.slate.canvasW
    endX = app.slate.w - startX*2
    # draw white background for first layer (default look)
    app.StartLayer.drawCanvas(app, startX, 0, endX, app.slate.h-10)
    # drawRect(200, 200, 200, 200, fill='white')
    # drawOld(app, allList, color):
    for layer in app.layers: #appp, draw current, color 
        layer.drawPencilLine(app, app.newPencilLine, app.currColor)
        layer.drawOld(app, layer.pencilLines, app.currColor) #2d list of points
    
    app.slate.drawToolBar(app)


runApp(width=800, height=600)