from cmu_graphics import *
# from draw import Layer

import random

class Frame:
    # draws buttons and basic setup of drawing app
    def __init__(self, app):
        pass

    def draw(self, app):
        self.drawBg(app)
        self.drawButtons(app)
        self.drawCanvas()
    
    def drawBg(self, app):
        drawRect(0, 0, app.width, app.height, fill=rgb(99, 97, 97))
        drawRect(0, 0, app.width/5, app.height, fill=rgb(99, 97, 97), border='black')
    
    def drawButtons(self, app):
        pass
    
    def drawCanvas(self):
        pass
    

class Layer:
    # puts all drawings into one instance of a layer, can stack layers 
    def __init__(self):
        self.rects = []
        self.ovals = []
        self.polygons = []
        self.straightLines = []
        self.currPencilLine = []
        self.pencilLines = [] # x, y, x1, y1, fill(changes), opacity(changes)
        self.brushLines = []
        self.undos = []
    

    def drawOld(self, app, allList, color):
        r = 1
        for pointList in allList:
            if app.brush:
                for i in range(1, len(pointList)):
                    drawLine(pointList[i-1][0]*r, pointList[i-1][1]*r, 
                            pointList[i][0]*r, pointList[i][1]*r, fill=color)
        pass
        #draws everything so calls drawStraightLine(self), etc, etc

    def drawPencilLine(self, app, pointList, color):
        if app.brush:
            for i in range(1, len(pointList)):
                drawLine(pointList[i-1][0], pointList[i-1][1], 
                        pointList[i][0], pointList[i][1], lineWidth=8, 
                        fill=color, opacity=60)
                r = 1  #+ random.random()/15
                # drawCircle(pointList[i-1][0], pointList[i-1][1], 
                #            10, fill=color, opacity=80)
                # drawCircle(pointList[i][0], pointList[i][1], 
                #            10, fill=color, opacity=80)
                drawLine(pointList[i-1][0]*r, pointList[i-1][1]*r, 
                        pointList[i][0]*r, pointList[i][1]*r, lineWidth=14, 
                        fill=color, opacity=50)
                drawLine(pointList[i-1][0]*r, pointList[i-1][1]*r, 
                        pointList[i][0]*r, pointList[i][1]*r, lineWidth=20, 
                        fill=color, opacity=30)
                
        elif app.pencil:
            for i in range(1, len(pointList)):
                drawLine(pointList[i-1][0], pointList[i-1][1], 
                        pointList[i][0], pointList[i][1], fill=color)
            

    def rect(self, tl, tr, w, h, fill):
        pass
        self.rects.append()
    
    def oval(self, mx, my, w, h, fill):
        pass
        self.ovals.append()

    def straightline(self):
        pass
        self.straightLines.append()

    def pencilLines(self):
        pass
        #makes one item, then adds it to self.pencilLines when done
    
    def undo(self):
        pass

    def redo(self):
        pass

def onAppStart(app):
    app.blankSlate = Frame(app)
    app.startLayer = Layer()
    app.layers = [app.startLayer]
    app.newPencilLine = [] # add this to pencilLines after
    app.currColor = None
    app.brush = False
    app.pencil = False

def onMousePress(app, mX, mY):
    # after clicking on a btton 
    # initialize that shape/line or layer
    # if button is draw pencil line, call Layer.pencilLines
    # wahtever color is selected
    app.brush = True
    r = random.randrange(0, 256)
    g = random.randrange(0, 256)
    b = random.randrange(0, 256)
    app.currColor = rgb(r, g, b)
    pass

def onMouseDrag(app, mX, mY):
    app.newPencilLine.append((mX, mY))
    pass

def onMouseRelease(app, mX, mY):
    #add it to the list of items
    # if drawing pencil line is True: then 
    app.startLayer.pencilLines.append([app.newPencilLine])
    app.newPencilLine = []
    pass

def redrawAll(app):
    app.blankSlate.draw(app)
    app.startLayer.drawPencilLine(app, app.newPencilLine, app.currColor)
    app.startLayer.drawOld(app, app.startLayer.pencilLines, app.currColor) #2d list of points
    # for layer in app.layers:
        #draw layer
    pass


runApp(width=800, height=600)